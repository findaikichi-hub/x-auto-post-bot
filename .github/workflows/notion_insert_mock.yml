name: Notion Insert Mock

on:
  workflow_dispatch:

jobs:
  notion_insert:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run Notion Insert Script (Mock)
        id: run_script
        run: |
          set +e
          python scripts/notion_insert.py > script_output.log 2>&1
          exit_code=$?
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
          if [ $exit_code -ne 0 ]; then
            echo "status=failed" >> $GITHUB_OUTPUT
            # Slack用にエラー内容をJSON安全な文字列に変換（コードブロック形式）
            error_json=$(cat script_output.log | jq -Rs '.')
            echo "error_message=${error_json}" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "error_message=\"\"" >> $GITHUB_OUTPUT
          fi
          set -e

      - name: Send Slack Notification
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "モックワークフロー実行結果: ${{ steps.run_script.outputs.status }}",
              "attachments": [
                {
                  "color": "${{ steps.run_script.outputs.status == 'success' && 'good' || 'danger' }}",
                  "text": ${{ steps.run_script.outputs.status == 'success'
                    && toJSON('Notion登録（モック）が成功しました')
                    || toJSON(format("Notion登録（モック）が失敗しました\n\nエラー内容:\n```{0}```", steps.run_script.outputs.error_message | fromJSON))
                  }}
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
