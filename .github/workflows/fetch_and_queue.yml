# リポジトリ直下で実行
cat > .github/workflows/fetch_and_queue.yml <<'YAML'
name: Fetch and Queue News

on:
  workflow_dispatch:

jobs:
  fetch-news:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install requests feedparser

      - name: Run fetch_and_queue script
        env:
          DEEPL_API_KEY: ${{ secrets.DEEPL_API_KEY }}
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DB_DRAFT_ID: ${{ secrets.NOTION_DB_DRAFT_ID }}
          RSS_URL: "https://feeds.bbci.co.uk/news/world/rss.xml"
        run: |
          python3 << 'EOF'
          import os, time, json
          import requests
          import feedparser

          DEEPL_API_KEY = os.getenv("DEEPL_API_KEY")
          NOTION_TOKEN = os.getenv("NOTION_TOKEN")
          NOTION_DB_DRAFT_ID = os.getenv("NOTION_DB_DRAFT_ID")
          RSS_URL = os.getenv("RSS_URL")

          assert DEEPL_API_KEY, "DEEPL_API_KEY missing"
          assert NOTION_TOKEN, "NOTION_TOKEN missing"
          assert NOTION_DB_DRAFT_ID, "NOTION_DB_DRAFT_ID missing"

          def deepl_translate(text: str, target_lang: str = "JA") -> str:
            r = requests.post(
              "https://api-free.deepl.com/v2/translate",
              data={"auth_key": DEEPL_API_KEY, "text": text, "target_lang": target_lang},
              timeout=30
            )
            if r.status_code != 200:
              print("[DeepL ERROR]", r.status_code, r.text[:300])
              return text
            return r.json()["translations"][0]["text"]

          def notion_create_page(title_ja: str, url: str):
            payload = {
              "parent": {"database_id": NOTION_DB_DRAFT_ID},
              "properties": {
                "Title":  {"title":  [{"text": {"content": title_ja}}]},
                "URL":    {"url": url},
                "Select": {"select": {"name": "draft"}}
              }
            }
            r = requests.post(
              "https://api.notion.com/v1/pages",
              headers={
                "Authorization": f"Bearer {NOTION_TOKEN}",
                "Content-Type": "application/json",
                "Notion-Version": "2022-06-28",
              },
              data=json.dumps(payload),
              timeout=30
            )
            if r.status_code >= 300:
              print("[Notion ERROR]", r.status_code, r.text[:500])
              return None
            data = r.json()
            print("Created draft page:", data.get("id"))
            return data

          print("[INFO] Fetching:", RSS_URL)
          feed = feedparser.parse(RSS_URL)
          print("[INFO] Entries:", len(feed.entries))
          for entry in feed.entries[:5]:
            title_en = entry.title
            url = entry.link
            title_ja = deepl_translate(title_en, "JA")
            print("-", title_en, "→", title_ja)
            notion_create_page(title_ja, url)
            time.sleep(1)  # 軽いレートリミット対策
          print("✅ Finished creating drafts in Notion")
          EOF
YAML

git add .github/workflows/fetch_and_queue.yml
git commit -m "fix(notion): map to Title/URL/Select + better logging"
git push origin main
